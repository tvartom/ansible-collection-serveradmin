#
# Managed by Ansible!
#
{% set path = application.path %}
{% macro php_location() -%}
      {% if webinstance.enable_php %}
        #https://blog.martinfjordvald.com/2013/04/nginx-config-history-fastcgi_params-versus-fastcgi-conf/
        location ~ [^/]\.php(/|$) {

           fastcgi_split_path_info ^(.+?\.php)(/.*)$;
           fastcgi_pass unix:/var/run/php-fpm-{{ webinstance.fullname }}.sock;

           {# Pga chroot i  php-fpm
           #fastcgi_param PATH_TRANSLATED /{{ webinstance.root_dir }}$fastcgi_script_name;
           #Utan chroot #}
           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_script_name;

           fastcgi_index index.php;

           {% for param in webinstance.fastcgi_params.application.keys() %}
             fastcgi_param {{ param }} ${{ param }};
           {% endfor %}
           {% for param in webinstance.fastcgi_params.webinstance.keys() %}
             fastcgi_param {{ param }} ${{ param }};
           {% endfor %}
           {% for param in webinstance.fastcgi_params.domaininstance.keys() %}
             fastcgi_param {{ param }} ${{ param }};
           {% endfor %}

           include fastcgi_params;
        }
      {% endif %}
{%- endmacro %}
{% macro more_location(location) -%}
      {% if location.filter is not defined
        or (location.filter.include_environment is defined and application.environment in location.filter.include_environment)
        or (location.filter.exclude_environment is defined and application.environment not in location.filter.exclude_environment) %}
         location {{ location.location }} {
           {% if location.root_dir | d(false) %}
             root {{ path }}/{{ location.root_dir }};
           {% elif location.alias_dir | d(false) %}
             alias {{ path }}/{{ location.alias_dir }};
           {% endif %}
           {% if location.try_files_index_php | d(false) %}
           try_files $uri {{ location.root_dir |d(location.alias_dir | d(location.location)) }}/index.php$is_args$args;
           {% endif %}
           {% if location.php | d(true) %}
             {{ php_location() }}
           {% endif %}
           {{ location.raw | d('') }}
           {{ location.body | d('') }}
         }
      {% endif %}
{%- endmacro %}


  {% for name, value  in webinstance.fastcgi_params.webinstance.items() %}
    set ${{ name }} '{{ webinstance[value] | default('') }}';
  {% endfor %}

  {% for name, value  in webinstance.fastcgi_params.application.items() %}
    set ${{ name }} '{{ application[value] | default('') }}';
  {% endfor %}


  access_log {{ path }}/log/nginx/{{ webinstance.instance }}-access.log  main;
  error_log  {{ path }}/log/nginx/{{ webinstance.instance }}-error.log info;

  {% if webinstance.use_custom_nginx_include_file %}
    include conf.d/{{ organisation.name }}/{{ webinstance.fullname }}_custom.include;
  {% else %}

    index {% if webinstance.enable_php %}index.php {% endif %}{{ webinstance.nginx_index_file | d('index.html') }};

    {% if webinstance.root_dir is defined %}
      root   {{ path }}/{{ webinstance.root_dir }};
    {% endif %}

    # set max upload size (Exampel 1M, 16M, 4G, 16G)
    client_max_body_size {{ webinstance.upload_max_filesize }};

    # fastcgi_buffers kan tweakas vid problem.
    # Följande kommando ger dig storleken på pagesize i linux: getconf PAGESIZE
    # Den är ofta 4K som standard.
    # fastcgi_buffers 64 4K;

{% if webinstance.x_robots_tag is defined %}
### Hantering av headern X-Robots-Tag för sökmotorer
# Denna gäller på alla, om inget annat anges:
set $x_robots_tag "{{ webinstance.x_robots_tag.root[application.environment] | default(webinstance.x_robots_tag.root.default | default('')) }}";
    {% for row in webinstance.x_robots_tag.locations | default([]) if row.filter is not defined
        or (row.filter.include_environment is defined and application.environment in row.filter.include_environment)
        or (row.filter.exclude_environment is defined and application.environment not in row.filter.exclude_environment)
      %}
      {% if row.comment is defined %}
        # {{ row.comment }}
      {% endif %}
  if ($request_uri ~{% if row.case_insensitive|default(False) %}*{% endif %} "{{ row.regexp }}") {
    set $x_robots_tag "{{ row.value }}";
  }
    {% endfor %}
add_header  X-Robots-Tag $x_robots_tag;
### Slut X-Robots-Tag
{% endif %}

    location / {
      {% if webinstance.restricted is defined %}
        auth_basic "{{ webinstance.restricted.caption }}";
        auth_basic_user_file "auth/{{ webinstance.restricted.file }}";
      {% endif %}

      {% if webinstance.wordpress_uam|default(False) %}
        # Make it possible to protect uploaded content with the Wordpress plugin User Access Manager
        # Source: Translation of the /wp-content/uploads/.htaccess-file.
        rewrite ^(/wp-content/uploads/[^?]*)$ /index.php?uamfiletype=attachment&uamgetfile=$1 last;
        rewrite ^(/wp-content/uploads/.*)\?(((?!uamfiletype).)*)$ /index.php?uamfiletype=attachment&uamgetfile=$1&$2 last;
        rewrite ^(/wp-content/uploads/.*)\?(.*)$ /index.php?uamgetfile=$1&$2 last;
      {% endif %}

      {{ webinstance.nginx_includes.rootlocation | default('') }}

      {% if webinstance.wordpress|default(False) or webinstance.permalinkhandling|default(False) %}
        # Make permalinks work in Wordpress!
        # This is cool because no php is touched for static content.
        # include the "?$args" part so non-default permalinks doesn't break when using query string
        try_files $uri $uri/ /index.php?$args;
      {% endif %}

      {{ php_location() }}


      {% for location in webinstance.more_locations | d([]) if location.nested | d(true) %}
        {{ more_location(location) }}
      {% endfor %}

      {% if (webinstance.proxy_pass.location |d('')).startswith('@') %}
      }
      {% endif %}

      {% if webinstance.proxy_pass is defined %}
        {% if webinstance.proxy_pass.location is defined %}
          {% set proxy_pass_end_bracket = '}' %}
          location {{ webinstance.proxy_pass.location }} {
        {% else %}
          {% set proxy_pass_end_bracket = '' %}
        {% endif %}
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header X-Forwarded-Proto $scheme;
        {% if webinstance.proxy_pass.upstream is defined %}
          proxy_pass http://{{ webinstance.fullname }}_{{ webinstance.proxy_pass.upstream }};
        {% else %}
          proxy_pass http://{{ webinstance.proxy_pass.host | d('localhost') }}:{{ webinstance.proxy_pass.port }};
        {% endif %}
        {{ proxy_pass_end_bracket }}
      {% endif %}

      {% if not (webinstance.proxy_pass.location |d('')).startswith('@') %}
        }
      {% endif %}


      {% for location in webinstance.more_locations | d([]) if not (location.nested | d(true)) %}
        {{ more_location(location) }}
      {% endfor %}

  {% endif %}
