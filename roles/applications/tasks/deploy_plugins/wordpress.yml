---
### Install Wordpress ########################################################################################

- name: "Set variable wordpress_database"
  set_fact:
    wordpress_database: "{{ application.databases[application.metadata.wordpress.databaseindex | default(0)] }}"

- name: Wordpress - Download and unpack if not present
  become: yes
  unarchive:
    remote_src: yes
    extra_opts: ['--strip-components=1', '--show-stored-names'] # Removes root wordpress/
    src: "https://wordpress.org/latest.tar.gz"
    dest: "{{ application.path }}/{{ application.webinstances[deploy.webinstance | mandatory].root_dir }}"
    owner: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    mode: "u=rwX,g=rX,o="
    creates: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-admin"

- name: Create wp-config.php with proper new lines
  become: yes
  become_user: "{{ application.process_user }}"
  shell: cat wp-config-sample.php | tr -d '\r' > wp-config.php
  args:
    chdir: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}"
    creates: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-config.php"

- name: "Compose settings"
  set_fact:
    wordpress_settings:
      # Remember quotes on string values
      - constant: DB_NAME
        value: "'{{ wordpress_database.database }}'"
      - constant: DB_USER
        value: "'{{ application.process_user }}'"
      - constant: DB_PASSWORD
        value: "''"
      - constant: DB_HOST
        value: "'localhost:/var/lib/mysql/mysql.sock'"
      - constant: DB_CHARSET
        value: "'{{ wordpress_database.charset | default('utf8mb4') }}'"
      - variable: table_prefix
        value: "'{{ wordpress_database.prefix | default('wp_') }}'"

- name: "Add settings from plugins"
  set_fact:
    wordpress_settings: >-
      {{
        wordpress_settings
        + application.metadata.wordpress.plugins | d([])
            | selectattr('settings', 'defined')
            | map(attribute='settings')
            | flatten
      }}

- name: "Config Wordpress (Constants)"
  become: yes
  lineinfile:
    path: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-config.php"
    state: present
    regexp: |-
      ^\s*define\(\s*('|"){{ item.constant }}("|')
    line: |-
      define( '{{ item.constant }}', {{ item.value }} ); // Set by Ansible!
  when: item.constant is defined
  loop: "{{ wordpress_settings }}"

- name: "Config Wordpress (Variables)"
  become: yes
  lineinfile:
    path: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-config.php"
    state: present
    regexp: |-
      ^\s*\${{ item.variable }}\s*=
    line: |-
      ${{ item.variable }} = {{ item.value }}; // Set by Ansible!
  when: item.variable is defined
  loop: "{{ wordpress_settings }}"

- name: "List of key/salt for cookies"
  set_fact:
    cookie_constants:
      - AUTH_KEY
      - SECURE_AUTH_KEY
      - LOGGED_IN_KEY
      - NONCE_KEY
      - AUTH_SALT
      - SECURE_AUTH_SALT
      - LOGGED_IN_SALT
      - NONCE_SALT

- name: "Checking for unset cookie key/salt constants"
  become: yes
  shell: egrep "^\\s*define\(\\s*'{{ item }}'\\s*,\\s*'put your unique phrase here'" "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-config.php" > /dev/null
  loop: "{{ cookie_constants }}"
  failed_when: false
  changed_when: cookie_constants_test.rc == 0
  register: cookie_constants_test

- name: "Set cookie keys/salts constants"
  become: yes
  lineinfile:
    path: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-config.php"
    state: present
    regexp: |-
      ^\s*define\(\s*('|"){{ result_row[result_row.ansible_loop_var] }}("|')
    line: |-
      define( {{ "%-20s" | format("'"~result_row[result_row.ansible_loop_var]~"',") }}'{{ lookup('password', '/dev/null length=64') }}' ); // Set by Ansible!
  loop: "{{ cookie_constants_test.results }}"
  loop_control:
    loop_var: result_row
    label: "{{ result_row[result_row.ansible_loop_var] }}"
  when: result_row.rc == 0

### Install Themes #########################################################################################

- include_tasks: deploy_plugins/wordpress_download_addon.yml
  vars:
    addon_type: theme
  loop: "{{ application.metadata.wordpress.themes | d([]) }}"
  loop_control:
    loop_var: addon

### Install Plugins #########################################################################################

- include_tasks: deploy_plugins/wordpress_download_addon.yml
  vars:
    addon_type: plugin
  loop: "{{ application.metadata.wordpress.plugins | d([]) }}"
  loop_control:
    loop_var: addon

### Patch and fix for CiviCRM ########################################################################################

- name: "Create dir for civicrm"
  become: yes
  file:
    path: "{{ application.path }}{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default( application.process_user, true ) }}"
    group: "{{ item.group | default( application.process_group, true ) }}"
    setype: "{{ item.setype | default( '_default' ) }}"                  # httpd_sys_content_t
    mode: "{{ item.mode | default('u=rwx,g=rx,o=') }}"
  when: item.when | default(True)
  loop:
    - path: "/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads"
      setype: "httpd_sys_rw_content_t"

    # CiviCRM:
    - path: "/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm"
      setype: "httpd_sys_rw_content_t"
      when: "{{ application.metadata.wordpress.civicrm is defined }}"

    - path: "/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/persist"
      setype: "httpd_sys_rw_content_t"
      when: "{{ application.metadata.wordpress.civicrm is defined }}"

    - path: "/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/persist/contribute"
      setype: "httpd_sys_rw_content_t"
      when: "{{ application.metadata.wordpress.civicrm is defined }}"

    #- path: "/civicrm"
    #  setype: "httpd_sys_rw_content_t"
    #  when: "{{ application.metadata.wordpress.civicrm is defined }}"

    #- path: "/civicrm/templates_c/"
    #  setype: "httpd_sys_rw_content_t"
    #  when: "{{ application.metadata.wordpress.civicrm is defined }}"

    - path: "/log/civicrm"
      setype: "httpd_sys_rw_content_t"
      when: "{{ application.metadata.wordpress.civicrm is defined }}"

- name: "Install extra packages for CiviCRM (Excl php-soap)"
  become: yes
  dnf:
    name:
      # CiviCRM require: https://docs.civicrm.org/installation/en/latest/general/requirements/
      - "{{ php_package }}-bcmath"
      - "{{ php_package }}-curl"
      - "{{ php_package }}-xml"
      - "{{ php_package }}-mbstring"
      - "{{ php_package }}-zip"
      - "{{ php_package }}-intl"
      # required to use the SOAP processor (required for the CiviSMTP service)
      # Installera med applicationen om du behöver denna.
      #- "{{ php_package }}-soap"
    state: present
  when: application.metadata.wordpress.civicrm is defined

- name: Patch CiviCRM
  block:
    - name: "Install GNU patch (YUM)"
      become: yes
      yum:
        name: patch
        state: present

    - name: "CiviCRM installer patch for unix socket unix(/var/lib/mysql/mysql.sock)"
      become: yes
      patch:
        src: "civicrm-{{ application.metadata.wordpress.civicrm.version }}.patch"
        basedir: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/plugins"
      ignore_errors: true
  when: application.metadata.wordpress.civicrm.patch_for_unix_socket | d(false)

- name: CiviCRM - Localization - Download and unpack if not present
  become: yes
  unarchive:
    remote_src: yes
    extra_opts: ['--strip-components=1', '--show-stored-names'] # Removes root civicrm/
    # https://download.civicrm.org
    src: "https://download.civicrm.org/civicrm-{{ application.metadata.wordpress.civicrm.version }}-l10n.tar.gz"
    dest: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/plugins/civicrm/civicrm"
    owner: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    mode: "u=rwX,g=rX,o="
    creates: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/plugins/civicrm/civicrm/l10n"
  when: application.metadata.wordpress.civicrm.localization | default(false)

- name: "Copy civicrm.settings.php from templates to uploads/civicrm"
  become: yes
  copy:
    src: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/plugins/civicrm/civicrm/templates/CRM/common/civicrm.settings.php.template"
    dest: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/civicrm.settings.php"
    owner: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    mode: "u=rwX,g=rX,o="
    force: no
    remote_src: yes
  when: application.metadata.wordpress.civicrm is defined and application.metadata.wordpress.civicrm.set_settings | d(true)

- name: "Sätt värden i civicrm.settings.php"
  become: yes
  replace:
    path: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/civicrm.settings.php"
    regexp: "{{ item.pattern }}"
    replace: "{{ item.value }}"
  loop:
    - pattern: "%%cms%%"
      value: WordPress

    # CIVICRM_UF_DSN
    - pattern: "%%CMSdbUser%%"
      value: "{{ application.process_user }}"
    - pattern: "%%CMSdbPass%%"
      value: ""
    - pattern: "%%CMSdbHost%%"
      value: unix(/var/lib/mysql/mysql.sock)
    - pattern: "%%CMSdbName%%"
      value: "{{ wordpress_database.database }}"

    - pattern: "%%extraSettings%%"
      value: |-
        Additional settings generated by installer:
        $civicrm_paths['wp.frontend.base']['url'] = 'https://{{ civicrm_maindomain }}/';
        $civicrm_paths['wp.backend.base']['url'] = 'https://{{ civicrm_maindomain }}/wp-admin/';
        $civicrm_setting['URL Preferences']['userFrameworkResourceURL'] = 'https://{{ civicrm_maindomain }}/wp-content/plugins/civicrm/civicrm';
    # CIVICRM_DSN
    - pattern: "%%dbUser%%"
      value: "{{ application.process_user }}"
    - pattern: "%%dbPass%%"
      value: ""
    - pattern: "%%dbHost%%"
      value: unix(/var/lib/mysql/mysql.sock)
    - pattern: "%%dbName%%"
      value: "{{ civicrm_database.database }}"

    - pattern: "%%crmRoot%%"
      value: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/plugins/civicrm/civicrm/"
    - pattern: "%%baseURL%%"
      value: "https://{{ civicrm_maindomain }}/"
    - pattern: "%%siteKey%%"
      value: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
    - pattern: |-
        %%templateCompileDir%%/mail\.log
      value: "{{ application.path }}/log/civicrm/mail.log"
    - pattern: "%%templateCompileDir%%"
      #value: "{{ application.path }}/civicrm/templates_c/"
      value: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/templates_c/"
  vars:
    civicrm_database: "{{ application.databases[application.metadata.wordpress.civicrm.databaseindex | d(application.metadata.wordpress.databaseindex | d(0))] }}"
    civicrm_maindomain: "{{ application.webinstances[deploy.webinstance].domaininstances[0].domains[0] }}"
  when: application.metadata.wordpress.civicrm is defined and application.metadata.wordpress.civicrm.set_settings | d(true)


# CiviCRM -> Administer -> System Settings -> Directories -> Custom Template Directory = "[civicrm.files]/custom_templates/"
# (/wp-content/uploads/civicrm/custom_templates)
- name: ensure custom facts directory exists
  become: yes
  file:
    path: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/custom_templates/{{ custom_template.path }}"
    recurse: yes
    state: directory
    owner: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    mode: "u=rwX,g=rX,o="
  loop: "{{ application.metadata.wordpress.civicrm.custom_templates | d([]) }}"
  loop_control:
    loop_var: custom_template

- name: "Create custom templates for CIVICRM"
  become: yes
  template:
    src: "deploy_plugins/wordpress/civicrm/script.extra.tpl.j2"
    dest: "{{ application.path }}/{{ application.webinstances[deploy.webinstance].root_dir }}/wp-content/uploads/civicrm/custom_templates/{{ custom_template.path }}/{{ custom_template.name }}.extra.tpl"
    owner: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    mode: "u=rwX,g=rX,o="
  loop: "{{ application.metadata.wordpress.civicrm.custom_templates | d([]) }}"
  loop_control:
    loop_var: custom_template
