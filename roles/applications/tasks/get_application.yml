---
# Usage:
#
#- include_tasks: get_application.yml
#  vars:
#     application_instance: "{ ett item från application_instances }"
#     validate_config: true (Default: false)
#
# Returnerar: application

- name: "Temp application"
  set_fact:
    temp_application: >-
      {{
        applications[application_instance.name | mandatory('Application must be specified for an application instance')] | d({})
      }}


- name: "Temp application_template"
  set_fact:
    temp_application_template: >-
      {{
        application_templates[
          application_instance.template|d(
            temp_application.template|d(
              application_instance.name|d()
            )
          )
        ] | d({})
      }}


- name: "Temp variable: environment"
  set_fact:
    temp_application_environment: >-
      {{
        application_instance.environment | d(
          temp_application.environment | d(
            temp_application_template.environment
          )
        ) | mandatory('Environment must be specified for application '~application_instance.name)
      }}

- name: "Temp variable: fullname"
  set_fact:
    temp_application_fullname: "{{ temp_application_environment }}-{{ application_instance.name }}"

- name: "Temp varibale: organisation"
  set_fact:
    temp_application_organisation: >-
      {{
        application_instance.organisation | d(
          temp_application.organisation | d(
            temp_application_template.organisation | d(
              organisation.name
            )
          )
        )
      }}

- name: "Generate default values for application"
  set_fact:
    temp_application_default:
      #Properties must be set in application_instances:
        # name:
        # environment:
      #Properties with default values:
      process_user: "app-{{ temp_application_fullname }}"
      process_group: "app-{{ temp_application_fullname }}"
      enable_redis: false
      backup_database: []
      repos: []
      webinstances: {}
      desc: ""
      organisation: "{{ temp_application_organisation }}"
      path: "/opt/{{ temp_application_organisation }}/{{ temp_application_fullname }}"
      linux_packages: [] # Installera extra packages
        #Example for linux_packages:
        # - pdftoppm
        # - "{{ php_package }}-bcmath"
        # - "{{ 'redhat-package' if ansible_distribution_file_variety == "RedHat" else 'debian-package' }}"
      locales: []
        #Example for locales:
        # - sv_SE # Svenska (Sverige)
        # - nb_NO # Bokmål (Justerad danska för att passa norska) 90% väljer detta i skolan
        # - nn_NO # Nynorsk (Nytt skriftspråk bygger på norska dialekter) 10% väljer detta i skolan
      #Properties that default value is: not defined
        # [databases:]
        # [nodejs_version:]
      #Populated properties:
      fullname: "{{ temp_application_fullname }}"
      any_enable_php: false
      any_enable_php_composer: false
      any_enable_https: false
      any_letsencrypt: false

- name: "Generate default values for webinstance"
  set_fact:
    temp_webinstance_default:
      enable_https: "{{ webserver_use_ssl and applications_enable_https_by_default }}"
      only_https: "{{ webserver_use_letsencrypt }}" # No effect if enable_https == false, false if we don't have real certs.
      enable_http2: true # No effect if enable_https == false
      listen_to_ipv6: true
      # HTTP Strict Transport Security (HSTS)
      # https://hstspreload.org/
      # includeSubDomains och preload är default false.
      # Även max_age måste ökas för registreras.
      hsts: 
        enable: true
        max_age: 15768000
        includeSubDomains: false
        preload: false
      enable_php: false
      enable_php_composer: false
      upload_max_filesize: 1M
      domains_source: {}
      fastcgi_params:
        domaininstance: {}
        webinstance: {}
        application: {}
      nginx_includes: {}
      #  [rootlocation:]
      #  [httpinstance:] # Includes in nginx
      domaininstances: []
      # - domains:
      #     - "primary domain"
      #     [- "secondary domain 1"]
      #     [- "secondary domain 2"]
      #     [- ...]
      #   [default_server: false]
      #   [instance: "default"]
      #   [group: "default"]
      use_custom_nginx_include_file: false
      listen_ports_http: [80]
      listen_ports_https: [443]
      domaininstance_groups: {}
      cert_handler: "{{ 'letsencrypt' if webserver_use_letsencrypt else 'selfsigned' }}" # [letsencrypt/selfsigned]
      php_status_path: "/php-fpm-status" # To make it public, use suffix .php if php-conf allow it, false or empty to not use.
      create_root_dir: false
      #Properties that default value is: not defined
      # [restricted:]
      #   - caption:
      #   - file:
      # [permalinkhandling: true]
      # [proxy_port: 8080]
      # [nginx_index_file: index.html]
      #Populated properties, if not defined:
      # [root_dir: "public_html_"+webinstance_with_key.key]
      #Populated properties:
      # fullname: "{{ application.fullname+'-'+webinstance_with_key.key }}"
      # instance:"{{ webinstance_with_key.key }}"

### Samla information ################################################################
- name: Hämta värden från application_template, applications och sätt default-värden
  set_fact:
    # temp_application_default              From above
    # ?applications_template[template/name] From /applications/defaults/main.yml with predefined application_templates
    # ?applications[name]                   From group_vars/all.yml (Can also be declared i gorup_vars/* or host_vars)
    # application_instance                  From host_vars
    application: >-
      {{
        temp_application_default
        | combine(temp_application_template, recursive=True)
        | combine(temp_application,          recursive=True)
        | combine(application_instance,      recursive=True)
      }}

- name: "Read application config (If exists)"
  include_vars:
    dir: "{{ application.path }}/config"
    name: "{{ application.fullname }}_config"
    extensions:
      - "yaml"
      - "yml"
      - "json"
  register: temp_application_config
  failed_when: false

- name: "Attach application config"
  set_fact:
    application: >-
      {{
        application
        | combine({
          "config": temp_application_config.ansible_facts[application.fullname+'_config']
        }, recursive=True)
      }}

- debug:
    var: application

- name: "Validate application config."
  fail:
    msg: "{{ item.msg | d('') }} ({{ item.key }} is missing in config for application. Create {{ application.path }}/config/{{ item.suggested_filename | d('<any filname>.yaml|.yml|.json') }} with the settings.)"
  when: validate_config | d(false) and application.config[item.key] is not defined
  loop: "{{ application.config_validate | d([]) }}"

- name: "Loop over all webinstances for this application"
  include_tasks: get_webinstance.yml
  loop: "{{ application.webinstances | dict2items }}"
  loop_control:
    loop_var: webinstance_with_key

- name: "Clear/Init repo_return-variable"
  set_fact:
    repo_returns: []

- name: "Loop over repos in application"
  include_role:
    name: git
    tasks_from: get_repo_url
  vars:
    repo_url_loop: true
  loop: "{{ application.repos }}"
  loop_control:
    loop_var: repo

- set_fact:
    application: "{{ application | combine({'repos': repo_returns}) }}"

- name: Applications info
  set_fact:
    applications_info: "{{- applications_info | default([]) + [ application ] -}}"
